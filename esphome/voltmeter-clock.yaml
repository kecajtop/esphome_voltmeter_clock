substitutions:
  devicename: voltmeter-clock
  upper_devicename: voltmeter-clock
  friendly_name: voltmeter-clock
  key: !secret key_voltmeter-clock
  ota: !secret ota_voltmeter-clock
  IP: !secret IP_voltmeter-clock
  fallback_pass: !secret fallback_pass_voltmeter-clock
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wifi_ssid_ha: !secret wifi_ssid_ha
  wifi_password_ha: !secret wifi_password_ha
  timezone_ha: !secret timezone_ha
  log_level: INFO
  sys_log_ip: !secret LOGGER_IP
  sys_log: 'true'

packages:
  wifi: !include common/wifi.yaml
  device_base: !include common/device_base.yaml
  generic: !include common/generic.yaml
  esp32_only: !include common/esp32_only.yaml
  syslog: !include common/logger/syslog.yaml

esp32:
  board: esp32dev
  framework:
    type: arduino

i2c:
  sda: GPIO21
  scl: GPIO22

globals:
  - id: flag
    type: int
    restore_value: no
    initial_value: '0'
  - id: boot
    type: int
    restore_value: no
    initial_value: '0'
  - id: sun_is_down
    type: bool
    restore_value: false
    initial_value: 'true'

sun:
  latitude: !secret lat
  longitude: !secret long
  on_sunrise:
    - elevation: 10°
      then:
        - logger.log:
            format: 'The sun is now down, light will turn on.'
        - globals.set:
            id: sun_is_down
            value: 'false'
  on_sunset:
    - elevation: 10°
      then:
        - logger.log:
            format: 'The sun is now up, light will not turn on.'
        - globals.set:
            id: sun_is_down
            value: 'true'

esphome:
  name: voltmeter-clock
  friendly_name: voltmeter-clock
  on_boot:
    priority: 600
    # ...
    then:
    - lambda: |-
        id(boot) = 0;
        id(seconds).set_level(1);
        id(minutes).set_level(1);
        id(hours).set_level(1);
        id(am_pm).set_level(1);
    - delay: 2s
    - lambda: |-
        id(boot) = 0;
        id(seconds).set_level(0);
        id(minutes).set_level(0);
        id(hours).set_level(0);
        id(am_pm).set_level(0);  
    - delay: 2s
    - lambda: |-
        id(boot) = 1;
        id(flag) = 1;
      # read the RTC time once when the system boots
    - ds1307.read_time:
    - light.turn_on:
        id: backlight
        red: 62%
        green: 67%
        blue: 0%
    - wait_until:
        api.connected:
    - if:
        condition:
          sun.is_above_horizon:
        then:
          - logger.log:
              level: DEBUG
              format: 'Sun is up, light will not turn on.'
          - globals.set:
              id: sun_is_down
              value: 'false'
        else:
          - logger.log:
              level: DEBUG
              format: 'Sun is down, light will turn on.'
    
ota:
  - platform: esphome
    password: $ota
    on_begin:
      then:
        - light.turn_on:
            id: backlight
            brightness: 100%
            red: 0%
            green: 0%
            blue: 100%
    on_error:
      then:
        - light.turn_on:
            id: backlight
            brightness: 100%
            red: 100%
            green: 0%
            blue: 0
    on_end:
      then:
        - light.turn_on:
            id: backlight
            brightness: 100%
            red: 0%
            green: 100%
            blue: 0

time:
  - platform: ds1307
    # repeated synchronization is not necessary unless the external RTC
    # is much more accurate than the internal clock
    update_interval: never
  - platform: homeassistant
    id: homeassistant_time
    # instead try to synchronize via network repeatedly ...
    on_time_sync:
      then:
        # ... and update the RTC when the synchronization was successful
        ds1307.write_time
  - platform: sntp
    id: sntp_time
    timezone: $timezone_ha
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org
    on_time_sync:
      then:
        # ... and update the RTC when the synchronization was successful
        ds1307.write_time

output:
  - platform: ledc 
    pin: GPIO13
    id: seconds #seconds
    frequency: 10000Hz
    min_power: 0.00
    max_power: 1

  - platform: ledc
    pin: GPIO12
    id: am_pm
    frequency: 10000Hz
    min_power: 0.00
    max_power: 1

  - platform: ledc
    pin: GPIO14
    id: hours
    frequency: 10000Hz
    min_power: 0.00
    max_power: 1

  - platform: ledc
    pin: GPIO27
    id: minutes
    frequency: 10000Hz
    min_power: 0.00
    max_power: 0.95

interval:
  - interval: 1s
    then:
      - lambda: |-
          if (id(flag) == 1)
          {
            id(seconds).set_level(id(homeassistant_time).now().second/60.0);
            id(minutes).set_level(id(homeassistant_time).now().minute/60.0);
            auto hour = id(homeassistant_time).now().hour;
            id(hours).set_level(hour/24.0);
            //if (hour > 12)
            //{
            //  id(hours).set_level((hour - 12) /12.0);
            //  id(am_pm).set_level(0.75);
            //}
            //else
            //{
            //  id(hours).set_level(hour /12.0);
            //  id(am_pm).set_level(0.25);
            //}
          }

text_sensor:
  - <<: !include common/text_sensor/clock.yaml
  - <<: !include common/text_sensor/next_sunrise.yaml
  - <<: !include common/text_sensor/next_sunset.yaml

sensor:
  - <<: !include common/sensor/sun_e.yaml
  - <<: !include common/sensor/sun_a.yaml

select:
  - platform: template
    name: ${friendly_name} Calibration function
    id: select_1
    optimistic: true
    options:
      - ZERO
      - FULL
      - RUN
    initial_option: RUN
    set_action:
      - logger.log:
          format: "Chosen option: %s"
          args: ["x.c_str()"]
      - lambda: |-
          id(select_1).state = x.c_str();
    on_value:
      then:
      - lambda: |-
          if ( x == "ZERO")
          {
            id(flag) = 0;
            id(seconds).set_level(0);
            id(minutes).set_level(0);
            id(hours).set_level(0);
            id(am_pm).set_level(0);
          }
          else if ( x == "FULL")
          {
            id(flag) = 0;
            id(seconds).set_level(1);
            id(minutes).set_level(1);
            id(hours).set_level(1);
            id(am_pm).set_level(1);

          }
          else if ( x == "RUN")
          {
            if (id(boot) == 1)
            {
              id(flag) = 1;
            }
            else
            {
              id(flag) = 0;
            }

          }
          if (id(sun_is_down)) 
          {
            id(backlight).turn_on().set_brightness(0.7).perform();
            ESP_LOGD("lambda", "The sun is now down, light will turn on");

          }
          else
          {
            id(backlight).turn_on().set_brightness(1.0).perform();
            ESP_LOGD("lambda", "The sun is now up, light will not turn off");
          }


light:
  - platform: neopixelbus
    type: GRB
    id: backlight
    variant: WS2811
    pin: GPIO15
    num_leds: 3
    name: ${friendly_name} Backlight
    default_transition_length: 10s
